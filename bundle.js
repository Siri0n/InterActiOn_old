(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

//var Phaser = require("phaser");

var game = new Phaser.Game(800, 600, Phaser.AUTO, '');

game.state.add("game", function () {
	var data;
	return {
		init: function init(data_) {
			data = data_;
		},
		preload: function preload() {
			game.load.image("cell", "assets/cell.png");
			game.load.start();
		},
		create: function create() {
			var main = new Game({ game: game, data: data, rect: new Phaser.Rectangle(0, 0, game.width, game.height) });
		}
	};
}());

game.state.start("game", false, false, { width: 6, height: 6 });

function Game(_ref) {
	var game = _ref.game;
	var data = _ref.data;
	var rect = _ref.rect;

	var g = game.add.group();
	var field = new Field({ game: game, group: g, data: data });
	var scale = Math.min(rect.width / field.width, rect.height / field.height);
	g.scale.x = g.scale.y = scale;
	g.x = rect.x + (rect.width - field.width * scale) / 2;
	g.y = rect.y + (rect.height - field.height * scale) / 2;

	field.generateTokens();
}

function Field(_ref2) {
	var game = _ref2.game;
	var group = _ref2.group;
	var data = _ref2.data;

	var self = this;
	var background = game.add.group();
	var img = game.cache.getImage("cell");
	var w = this.tileWidth = img.width;
	var h = this.tileHeight = img.height;
	this.width = w * data.width;
	this.height = h * data.height;
	group.add(background);
	for (var i = 0; i < data.height; i++) {
		for (var j = 0; j < data.width; j++) {
			background.add(game.make.image(this.tileWidth * j, this.tileHeight * i, "cell"));
		}
	}

	var tokensLayer = game.add.group();
	group.add(tokensLayer);

	var tokens;

	this.generateTokens = function () {
		tokens = [];
		for (var _i = 0; _i < data.height; _i++) {
			for (var _j = 0; _j < data.width; _j++) {
				tokens.push(new Token({
					game: game,
					group: tokensLayer,
					data: {
						x: _j,
						y: _i,
						type: game.rnd.pick(["red", "green"])
					},
					grid: { h: h, w: w },
					events: {
						click: this.click
					}
				}));
			}
		}
	};

	this.rotate = function (clockwise) {
		if (clockwise) {
			tokens.forEach(function (token) {
				var _token$position = token.position();

				var x = _token$position.x;
				var y = _token$position.y;

				token.moveTo({ x: data.width - y - 1, y: x }, 500);
			});
		} else {
			//stub
		}
	};
	this.click = function (token) {
		self.rotate(true);
	};
}

var colors = {
	green: 0x11ff11,
	red: 0xff1111
};

function Token(_ref3) {
	var game = _ref3.game;
	var group = _ref3.group;
	var data = _ref3.data;
	var grid = _ref3.grid;
	var events = _ref3.events;

	var self = this;

	var h = grid.h;
	var w = grid.w;
	var x = data.x;
	var y = data.y;
	var value = data.value;
	var type = data.type;

	var g = game.make.graphics(x * w, y * h);
	group.add(g);

	g.lineStyle(3, 0, 1);
	g.beginFill(colors[type], 1);
	g.drawCircle(w / 2, h / 2, w / 2);
	g.endFill();

	g.inputEnabled = true;
	g.events.onInputDown.add(function () {
		events.click(self);
	});

	this.position = function () {
		return { x: x, y: y };
	};
	this.moveTo = function (position, duration) {
		game.add.tween(g).to({ x: position.x * w, y: position.y * h }, duration, "Linear", true).onComplete.add(function () {
			x = position.x;
			y = position.y;
		});
	};
}

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
